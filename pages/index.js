import Head from 'next/head';
import Image from 'next/image';
import moment from 'moment';
import { useState } from 'react';
import TimeKeeper from 'react-timekeeper';

export default function Home() {
  const [start, setStart] = useState('12:00pm');
  const [end, setEnd] = useState('12:00pm');
  const [totalHours, setTotalHours] = useState('');
  const [totalMins, setTotalMins] = useState('');
  const [time, setTime] = useState('12:00pm');
  const [showTime1, setShowTime1] = useState(false);
  const [showTime2, setShowTime2] = useState(false);
  const [showCalculated, setShowCalculated] = useState(false);
  const [morningHours, setMorningHours] = useState('');
  const [eveningHours, setEveningHours] = useState('');

  const calculateTime = e => {
    e.preventDefault();
    var startTime = moment(start, 'HH:mm:ss a');
    const morningCutoff = moment('16:00:00', 'HH:mm:ss a');
    var endTime = moment(end, 'HH:mm:ss a');

    if (endTime.isBefore(startTime)) {
      endTime.add(1, 'd');
    }

    const duration = moment
      .duration(endTime.diff(startTime))
      .asHours()
      .toFixed(2);
    const durationMins = moment.duration(endTime.diff(startTime)).asMinutes();

    const morningDiff = moment
      .duration(morningCutoff.diff(startTime))
      .asHours()
      .toFixed(2);

    const eveningDiff = moment
      .duration(endTime.diff(morningCutoff))
      .asHours()
      .toFixed(2);

    setMorningHours(morningDiff);
    setEveningHours(eveningDiff);
    setTotalHours(duration);
    setTotalMins(durationMins);
    setShowCalculated(true);
  };

  const clearFields = e => {
    e.preventDefault();
    setTotalHours('');
    setShowCalculated(false);
  };

  return (
    <div className=''>
      <Head>
        <title>Kitchen Hours by Kitchen Army</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='flex justify-center mt-10 '>
        <form className='p-6  bg-white rounded-lg border border-gray-200 shadow-md hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700'>
          <div>
            {showTime1 && (
              <TimeKeeper
                time={time}
                onChange={newTime => setStart(newTime.formatted12)}
                onDoneClick={() => setShowTime1(false)}
                switchToMinuteOnHourSelect
              />
            )}
          </div>
          <div className='mb-6'>
            <label
              htmlFor='startTime'
              className='mb-2 text-sm font-medium text-gray-900 dark:text-gray-300'
            >
              Start Time:
            </label>
            <input
              type='text'
              id='startTime'
              onClick={() => setShowTime1(true)}
              onChange={e => setStart(e.target.value)}
              value={start}
              className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'
              placeholder='hhmm'
              required
            />
          </div>
          <div className='mb-6'>
            <div>
              {showTime2 && (
                <TimeKeeper
                  time={time}
                  onChange={newTime => setEnd(newTime.formatted12)}
                  onDoneClick={() => setShowTime2(false)}
                  switchToMinuteOnHourSelect
                />
              )}
            </div>
            <label
              htmlFor='endTime'
              className='mb-2 text-sm font-medium text-gray-900 dark:text-gray-300'
            >
              End Time:
            </label>
            <input
              type='text'
              id='endTime'
              onClick={() => setShowTime2(true)}
              placeholder='hhmm'
              value={end}
              onChange={e => setEnd(e.target.value)}
              className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500  w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'
              required
            />
          </div>
          <div className='flex items-start mb-6'></div>
          <button
            type='submit'
            onClick={calculateTime}
            className='text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'
          >
            Calculate
          </button>
          <button
            type='submit'
            onClick={clearFields}
            className='text-white ml-1 bg-blue-200 hover:bg-blue-300 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'
          >
            Clear
          </button>
        </form>
      </main>
      <div className='flex justify-center mt-10'>
        <div>
          {showCalculated && (
            <div>
              Total Hours: {totalHours} / Total Mins: {totalMins} / Morning
              Hours: {morningHours} / Evening Hours: {eveningHours}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
